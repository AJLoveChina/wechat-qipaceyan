<style scoped lang="less">
  .loading-wrap{
    text-align: center;

    .tip{
      display: block;
      font-size:25px;
      line-height: 50px;
    }
  }

  .result-wrap{
    text-align: center;
    .text{
      display: block;
      margin:20px 0;
    }
    .van-button{
      margin: 20px 0;
    }
  }
  .small-tip{
    font-size:12px;
  }
  .loading-do{
    padding-top:100px;
  }
</style>
<template>

  <van-nav-bar
    title="报告结果"
    left-text="首页"
    left-arrow
    bind:click-left="onClickLeft"
  />

  <poster id="poster" config="{{posterConfig}}" bind:success="onPosterSuccess" bind:fail="onPosterFail">
  </poster>

  <view class="loading-wrap" wx:if="{{detail == null}}">
    <button open-type="getUserInfo" bindgetuserinfo="onGetUserInfo">点击生成您的专属报告</button>
    <text class="small-tip">出于安全策略需要点击才能获取您的信息, 给您造成不便敬请谅解</text>

    <view class="loading-do" wx:if="{{doing}}">
      <van-loading color="#333" size="50px" ></van-loading>
      <text class="tip">正在生成评估结果~</text>
    </view>
  </view>

  <view class="result-wrap" wx:if="{{detail != null}}">
    <text class="text">{{item.title}} 评估报告已经生成</text>
    <van-button custom-class="van-button" type="primary" @tap="reShow">点击查看报告, 长按报告图片即可保存</van-button>
  </view>

</template>
<script>
  import wepy from 'wepy';
  import LOG from 'easy.log.js'
  import DATA from '../data/data'
  import util from '../common/util'
  import Poster from '../components/poster-canvas/poster/poster'

  const log = LOG("app.result");

  export default class MyPage extends wepy.page {
    customData = {}  // 自定义数据

    customFunction() {
    }  //自定义方法


    onPosterSuccess(e) {
      const { detail } = e;
      wx.previewImage({
        current: detail,
        urls: [detail]
      });

      this.detail = detail;
      this.$apply();
    }

    getRelativeImgPath(toPath) {
      return util.relative("../components/poster-canvas/poster", toPath);
    }

    onPosterFail() {

    }

    getUserInfo() {
      return new Promise((resolve, reject) => {
        this.$parent.getUserInfo(userInfo => {
          resolve(userInfo);
        })
      })
    }

    start(userInfo) {
      let nickName = userInfo.nickName;
      let avatarUrl = userInfo.avatarUrl;

      let params = Object.assign({
        id: 'zjl',
        rightNum: 2,
        pj: "被联盟认定为超凡大师",
        allNum: "20"
      }, this.options);
      let item = DATA[params.id];
      this.item = item;
      log(params);

      this.id = params.id;
      this.rightNum = params.rightNum;
      this.pj = params.pj;

      this.posterConfig = {
        width: 750,
        height: 1334,
        backgroundColor: '#fff',
        debug: false,
        blocks: [
          {
            width: 690,
            height: 808,
            x: 30,
            y: 183,
            borderWidth: 2,
            borderColor: '#f0c2a0',
            borderRadius: 20,
          },
          {
            width: 634,
            height: 74,
            x: 59,
            y: 770,
            backgroundColor: '#fff',
            opacity: 0.5,
            zIndex: 100,
          },
        ],
        texts: [
          {
            x: 113,
            y: 61,
            baseLine: 'middle',
            text: `${nickName}`,
            fontSize: 32,
            color: '#8d8d8d',
          },
          {
            x: 30,
            y: 113,
            baseLine: 'top',
            text: `我刚刚参加了${item.title}`,
            fontSize: 30,
            color: '#080808',
          },
          {
            x: 92,
            y: 810,
            fontSize: 38,
            baseLine: 'middle',
            text: '',
            width: 570,
            lineNum: 1,
            color: '#666',
            zIndex: 200,
          },
          {
            x: 59,
            y: 895,
            baseLine: 'middle',
            text: [
              {
                text: '答对',
                fontSize: 28,
                color: '#ec4b4b',
              },
              {
                text: `${params.rightNum} 道题目`,
                fontSize: 28,
                color: '#ec4b4b',
                marginLeft: 10,
              }
            ]
          },
          {
            x: 522,
            y: 895,
            baseLine: 'middle',
            text: `共${params.allNum}题`,
            fontSize: 28,
            color: '#929292',
          },
          {
            x: 59,
            y: 945,
            baseLine: 'middle',
            text: [
              {
                text: `${params.pj}`,
                fontSize: 28,
                color: '#ec4b4b',
              },
            ]
          },
          {
            x: 360,
            y: 1065,
            baseLine: 'top',
            text: '长按参与考试',
            fontSize: 38,
            color: '#080808',
          },
          {
            x: 360,
            y: 1123,
            baseLine: 'top',
            text: `和 ${nickName} 一较高下`,
            fontSize: 28,
            color: '#929292',
          },
        ],
        images: [
          // 第一张图
          {
            width: 62,
            height: 62,
            x: 30,
            y: 30,
            borderRadius: 62,
            url: `${avatarUrl}`
          },
          {
            width: 634,
            height: 634,
            x: 59,
            y: 210,
            url: this.getRelativeImgPath(`${item.img}`),
          },
          {
            width: 220,
            height: 220,
            x: 92,
            y: 1020,
            url: this.getRelativeImgPath('../images/qrcode.jpg'),
          },
          {
            width: 750,
            height: 90,
            x: 0,
            y: 1244,
            url:  this.getRelativeImgPath('../images/result-bottom.png'),
          }
        ]
      };

      this.$apply();

      //this.$invoke("poster", "create");
      setTimeout(() => {
        Poster.create();
      }, 1000);
    }

    async onLoad(options) {
      this.options = options;
    }  // 在Page和Component共用的生命周期函数

    onShow() {
    }  // 只在Page中存在的页面生命周期函数

    config = {
      usingComponents: {
        "poster": "../components/poster-canvas/poster/index",
        "van-loading": "../components/zanui/loading/index",
        "van-button": "../components/zanui/button/index",
        "van-nav-bar": "../components/zanui/nav-bar/index",
      }
    };  // 只在Page实例中存在的配置数据，对应于原生的page.json文件

    data = {
      options: {},
      detail: null,
      doing: false,
      id: "",
      rightNum: 0,
      pj: "",
      posterConfig: {},
      item: {}
    };  // 页面所需数据均需在这里声明，可用于模板数据绑定

    components = {};  // 声明页面中所引用的组件，或声明组件中所引用的子组件

    mixins = [];  // 声明页面所引用的Mixin实例

    computed = {};  // 声明计算属性（详见后文介绍）

    watch = {};  // 声明数据watcher（详见后文介绍）

    methods = {
      onGetUserInfo(e) {
        log(e);
        this.doing = true;
        this.start(e.detail.userInfo);
      },

      reShow() {
        this.onPosterSuccess({
          detail: this.detail
        });
      },

      onClickLeft() {
        wx.navigateTo({
          url: "home"
        });
      }
    };  // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

    events = {};  // 声明组件之间的事件处理函数
  }
</script>
